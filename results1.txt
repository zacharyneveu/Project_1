# Results

## Knapsack
The exhaustive knapsack algorithm attempts to solve the knapsack problem using brute force to try every possible solution. For the knapsack problem, we were given instances each with a different number of objects and cost limits. The algorithm we implemented created all possible subsets of knapsack objects and returned the knapsack with the maximum value that met the cost constraint. The time complexity of this algorithm is O(2n) as an object in a knapsack is either in(1) or out(0) and for n objects there are 2n different combinations that we must try. For instances with a large (>32) number of objects in the knapsack, our algorithm performed worse as the number of objects grew as it was limited by a time constraint and therefore wasnâ€™t able to evaluate all possible subsets. To improve the efficiency of our algorithm, we would use a more complex strategy to find the subsets instead of evaluating all possible solution.

## Graph Coloring
The exhaustive graph coloring algorithm implemented is successful at iterating over all possible solutions. This algorithm would benefit from an improved iterator. Specifically, the current iterator starts with all nodes set to color 0. It then sets the first node to color 1, then instead of moving on to the second node, it sets the first node to color 2, 3, ... up to the number of colors. This problem is a holdover from the strategy used with the binary decisions from Knapsack and could be improved. While both the current implementatation and this proposed improvement run in num_colors^n time, the proposed improvement would improve early solutions when the algorithm is not run to completion.
