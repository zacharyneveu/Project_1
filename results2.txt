# Results

## Knapsack

## Graph Coloring
The greedy algorithm used for this problem is quite simple. To start, all nodes on the graph are set to color 0. The algorithm then iterates over all nodes in the graph. Each node is set to the lowest number color which no adjacent node occupies. If no color is available that is less than the maximum color, then the node is left on color 0. This strategy is not guaranteed to find an optimal solution, but runs quickly and has good results. The runtime of this algorithm is O(DN) where D is the maximum degree of a vertex in the graph, and N is the number of nodes. One possible optimization that could be made to yield better results would be to set conflict nodes to a random color rather than leaving them at color 0. The logic for this is that given a large number of conflicts, the current algorithm would leave a graph with a disproportionate amount of nodes colored 0. In the extreme case, a fully connected graph with only 2 colors, the current algorithm would have n-1 nodes set to color 0, and one node set to color 1. Randomly assigning colors would leave about half of the nodes set to 1, and half set to 0 which would provide many fewer conflicts.
